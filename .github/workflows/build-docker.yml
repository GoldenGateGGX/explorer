name: GGX Explorer Staging

on:
  push:
    branches: 
      - staging
      - automate-deployment

permissions:
      contents: read
      id-token: write

jobs:
  docker-build-push-sydney:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: eu-central-1
          role-to-assume: arn:aws:iam::${{ secrets.NONPROD_AWS_ACCOUNT_ID }}:role/github-dev

      - name: Log in to Amazon ECR
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v1

      - name: Check out code
        uses: actions/checkout@v3

      - name: Set Image Tag
        run: echo "SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_ENV

      - name: build full image ref
        id: image_full_ref
        run: echo "IMAGE_TAG=${{ steps.login-ecr-public.outputs.registry }}/explorer-dev:explorer-stg-$SHORT_SHA" >> "$GITHUB_OUTPUT"


      - name: Build, tag, and upload the docker image
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REPOSITORY: explorer-dev
        run: |
          docker build -t $REGISTRY/$REPOSITORY:explorer-stg-$SHORT_SHA -f docker/Dockerfile .
          docker push $REGISTRY/$REPOSITORY:explorer-stg-$SHORT_SHA

      - name: Log out of Amazon ECR
        run: docker logout ${{ steps.login-ecr-public.outputs.registry }}

      - name: Generate token
        id: generate_token
        uses: getsentry/action-github-app-token@v2
        with:
          # RSA Private key created for the GitHub app
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}
          # App id
          app_id: ${{ secrets.GH_APP_ID }}

      - name: Check out argocd code
        uses: actions/checkout@v3
        with:
          repository: ggxchain/ggx-argocd-apps
          ref: main
          path: argocd-manifests
          token: ${{ steps.generate_token.outputs.token }}

      - name: Update Image Version in the related deployment manifest
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: 'manifests/explorer-staging/deployment.yaml'
          propertyPath: 'spec.template.spec.containers[0].image'
          value: ${{ steps.image_full_ref.outputs.IMAGE_TAG }}
          branch: deployment/${{ env.SHORT_SHA }}
          repository: ggxchain/ggx-argocd-apps
          targetBranch: main
          masterBranchName: main
          workDir: argocd-manifests
          createPR: true
          message: 'Update Image Version to ${{ steps.image_full_ref.outputs.IMAGE_TAG }}' 
